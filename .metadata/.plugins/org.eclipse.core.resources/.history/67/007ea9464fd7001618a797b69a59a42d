package helpers;

import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
import static org.lwjgl.opengl.GL11.GL_MODELVIEW;
import static org.lwjgl.opengl.GL11.GL_PROJECTION;
import static org.lwjgl.opengl.GL11.GL_QUADS;
import static org.lwjgl.opengl.GL11.GL_BLEND;
import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.glBegin;
import static org.lwjgl.opengl.GL11.glEnd;
import static org.lwjgl.opengl.GL11.glLoadIdentity;
import static org.lwjgl.opengl.GL11.glMatrixMode;
import static org.lwjgl.opengl.GL11.glOrtho;
import static org.lwjgl.opengl.GL11.glVertex2f;
import static org.lwjgl.opengl.GL11.glRotatef;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glTranslatef;
import static org.lwjgl.opengl.GL11.glTexCoord2f;
import static org.lwjgl.opengl.GL11.glBlendFunc;

import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;

import org.newdawn.slick.opengl.Texture;
import org.newdawn.slick.opengl.TextureLoader;
import org.newdawn.slick.util.ResourceLoader;


public class Artist {

	public static final int WIDTH = 1472, HEIGHT = 960, TILE_SIZE = 64;
	
	public static void BeginSession()
	{
		 Texture tex = TextureLoader.getTexture("PNG",new FileInputStream("gam1088.png"));
		    int byteCount = 3; //Set this to 4 for PNG, TGA, etc.
		    int trueWidth = tex.getImageWidth() * byteCount; //For speed
		 
		    int[] array = new int[tex.getImageWidth() * tex.getImageHeight()];
		    //If you call getTextureData() continuously in the loop, it's very slow.
		    byte[] data = tex.getTextureData();
		 
		    for(int y = 0; y < tex.getImageHeight(); y++) {
		      for(int x = 0; x < tex.getImageWidth(); x++) {
		        int i = y * trueWidth + x * byteCount;
		 
		        //Without using "& 0xFF," there were some bad color problems.
		        //This is due to conversion from byte to int (a byte is -128 to 127,
		        //and we want 0 to 255).
		        int r = data[i]     & 0xFF;
		        int g = data[i + 1] & 0xFF;
		        int b = data[i + 2] & 0xFF;
		        int a = 0xFF;
		 
		        if(byteCount == 4) {
		          a = data[i + 3] & 0xFF;
		 
		          if(a > 0) {
		            double ap = a / 255.0; //alpha percentage
		            r = (int)Math.round(r * ap);
		            g = (int)Math.round(g * ap);
		            b = (int)Math.round(b * ap);
		            a = 0xFF;
		          }
		        }
		 
		        array[y * tex.getImageWidth() + x] =
		          (a << 24) |
		          (r << 16) |
		          (g <<  8) |
		          (b);
		      }
		    }
		 
		    Cursor cursor = new Cursor(tex.getImageWidth(),tex.getImageHeight(),0,
		      tex.getImageHeight() - 1,1,IntBuffer.wrap(array),null);
		    Mouse.setNativeCursor(cursor);
		Display.setTitle("CSEDefender");
		try {
			Display.setDisplayMode( new DisplayMode( WIDTH ,HEIGHT ));
			Display.create();
		} catch (LWJGLException e) {
			e.printStackTrace();
		}
		
		glMatrixMode( GL_PROJECTION );
		glLoadIdentity();
		glOrtho(0, WIDTH, HEIGHT, 0 ,1, -1);
		glMatrixMode( GL_MODELVIEW );
		glEnable( GL_TEXTURE_2D );
		glEnable( GL_BLEND );
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	}
	public static boolean CheckCollision(float x1, float y1, float width1, float height1, float x2, float y2, float width2, float height2)
	{
		if(x1 + width1 > x2 && x1 < x2 +width2 && y1 + height1 > y2 && y1 < y2 + height2)
		{
			return true;
		}
		return false;
	}
	public static void DrawQuad(float x, float y, float width, float height)
	{
		glBegin( GL_QUADS );
		glVertex2f(x, y); // Top left corner
		glVertex2f(x + width, y); // Top right corner
		glVertex2f(x + width, y + height); // Bottom right corner
		glVertex2f(x, y + height); // Buttom left corner
		glEnd();
	}
	
	public static void DrawQuadTex(Texture tex, float x, float y, float width, float height)
	{
		tex.bind();
		glTranslatef(x, y, 0);
		glBegin(GL_QUADS);
		glTexCoord2f(0, 0);
		glVertex2f(0, 0);
		glTexCoord2f(1, 0);
		glVertex2f(width, 0);
		glTexCoord2f(1, 1);
		glVertex2f(width, height);
		glTexCoord2f(0, 1);
		glVertex2f(0, height);
		glEnd();
		glLoadIdentity();
		
	}
	
	public static void DrawQuadTexRot(Texture tex, float x, float y, float width, float height, float angle)
	{
		tex.bind();
		glTranslatef(x + width / 2, y + height / 2, 0);
		glRotatef(angle, 0, 0, 1);
		glTranslatef(- width / 2, - height / 2, 0);
		glBegin(GL_QUADS);
		glTexCoord2f(0, 0);
		glVertex2f(0, 0);
		glTexCoord2f(1, 0);
		glVertex2f(width, 0);
		glTexCoord2f(1, 1);
		glVertex2f(width, height);
		glTexCoord2f(0, 1);
		glVertex2f(0, height);
		glEnd();
		glLoadIdentity();
		
	}
	
	public static Texture LoadTexture(String path, String fileType)
	{
		Texture tex = null;
		InputStream in = ResourceLoader.getResourceAsStream(path);
		try {
			tex = TextureLoader.getTexture(fileType, in);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return tex;
	}
	public static Texture QuickLoad(String name)
	{
		Texture tex = null;
		tex = LoadTexture("res/" + name + ".png", "PNG");
		return tex;
	}
}
